import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { keyBy } from 'lodash';
import postAPI from './postApi';

const initialState = {
  postMap: {},
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAllAsync = createAsyncThunk(
  'post/fetchAll',
  async () => {
    const response = await postAPI.GET();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const createAsync = createAsyncThunk(
  'post/create',
  async (post) => {
    const response = await postAPI.POST(post);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const updateAsync = createAsyncThunk(
  'post/update',
  async ({postSlug, update }) => {
    const response = await postAPI.PUT(postSlug, update);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const deleteAsync = createAsyncThunk(
  'post/delete',
  async (slug) => {
    const response = await postAPI.DELETE(slug);
    // The value we return becomes the `fulfilled` action payload
    return { ...response.data, slug };
  }
);

export const postSlice = createSlice({
  name: 'post',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    /* EXAMPLE: we don't use it here
    fetchAll: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.postMap =  action.payload;
    }*/
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.postMap = keyBy(action.payload, 'slug');
      })
      .addCase(fetchAllAsync.rejected, (state, action) => {
        state.status = 'error';
        state.error = action.error;
        state.postMap = action.payload;
      })
      .addCase(createAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const newTrade = action.payload;
        state.postMap = { ...state.postMap, [newTrade.slug]: newTrade };
      })
      .addCase(createAsync.rejected, (state, action) => {
        state.status = 'idle';
        //state.value += action.payload;
      })
      .addCase(updateAsync.pending, (state, action) => {
        state.status = 'loading';
        if (state.postMap[action.meta.arg.postSlug]) {
          state.postMap[action.meta.arg.postSlug].updating = true;
        }
          
      })
      .addCase(updateAsync.fulfilled, (state, action) => {
        state.status = 'idle';

        state.value += action.payload;
      })
      .addCase(updateAsync.rejected, (state, action) => {
        state.error = action.error;
        state.status = 'error';
        if (state.postMap[action.meta.arg.postSlug]) {
          state.postMap[action.meta.arg.postSlug].updating = false;
          state.postMap[action.meta.arg.postSlug].updateError = true;
        }
      })
      .addCase(deleteAsync.pending, (state, action) => {
        state.postMap[action.meta.arg].deleting = true
      })
      .addCase(deleteAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        delete state.postMap[action.payload.slug]
      })
      .addCase(deleteAsync.rejected, (state, action) => {
        state.error = action.error;
        state.status = 'error';
        state.postMap[action.meta.arg].deleting = false;
        state.postMap[action.meta.arg].deleteError = true;
      })
  },
});

export const { fetchAll } = postSlice.actions;


export default postSlice.reducer;
